var searchIndex = new Map(JSON.parse('[\
["br",{"doc":"","t":"GPPPPPNNHCNNCNNNCNNNNNNHCHNNNNNNNNNHKEEEEENMCCCCNMFKMNNMMNNNNNNNMNNNNCNNNNNCNNNPPIPGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPPPPGFINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNPPPPGPGPPGPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIEKEMCMCFENNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNN","n":["CorrectionMethod","GapSize","Graph","Greedy","One","Two","borrow","borrow_mut","build_methods","cli","clone","clone_into","correct","deref","deref_mut","drop","error","fmt","from","from_subset","init","into","is_in_subset","run_correction","set","set_nb_threads","to_owned","to_possible_value","to_subset","to_subset_unchecked","try_from","try_into","type_id","value_variants","vzip","u82level","Corrector","GapSize","Graph","Greedy","One","Two","correct","correct_error","exist","gap_size","graph","greedy","k","valid_kmer","Exist","Scenario","apply","borrow","borrow_mut","c","correct","correct_error","deref","deref_mut","drop","from","from_subset","get_score","init","init","into","is_in_subset","new","one","one_more","to_subset","to_subset_unchecked","try_from","try_into","two","type_id","valid_kmer","vzip","D","I","One","S","ScenarioOne","ScenarioOneIter","apply","borrow","borrow","borrow_mut","borrow_mut","c","clone","clone","clone_into","clone_into","correct","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_subset","from_subset","init","init","init","into","into","into_iter","is_in_subset","is_in_subset","iter","len","next","next_back","nth","par_bridge","size_hint","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","DCD","DCI","DD","ICD","ICI","ICS","II","IS","SCD","SCI","SCS","SD","SS","ScenarioTwo","ScenarioTwoIter","Two","apply","borrow","borrow","borrow_mut","borrow_mut","c","clone","clone","clone_into","clone_into","correct","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_subset","from_subset","init","init","init","into","into","into_iter","is_in_subset","is_in_subset","iter","len","next","next_back","nth","par_bridge","size_hint","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","GapSize","borrow","borrow_mut","correct_error","deref","deref_mut","drop","from","from_subset","init","ins_sub_correction","into","is_in_subset","new","to_subset","to_subset_unchecked","try_from","try_into","type_id","valid_kmer","vzip","Graph","borrow","borrow_mut","correct_error","deref","deref_mut","drop","from","from_subset","init","into","is_in_subset","new","to_subset","to_subset_unchecked","try_from","try_into","type_id","valid_kmer","vzip","Greedy","borrow","borrow_mut","correct_error","deref","deref_mut","drop","from","from_subset","init","into","is_in_subset","k","new","to_subset","to_subset_unchecked","try_from","try_into","type_id","valid_kmer","vzip","CantComputeAbundance","CantCreateFile","CantOpenFile","CantParseAbundanceMethod","Cli","Cli","Error","ErrorDurringRead","ErrorDurringWrite","IO","IO","KmerSolidNeedK","NoError","NoSolidityNoKmer","NotSameNumberOfInAndOut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_subset","from_subset","from_subset","init","init","init","into","into","into","is_in_subset","is_in_subset","is_in_subset","source","to_string","to_string","to_string","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","BoxKmerSet","Hash","KmerSet","Pcon","get","hash","k","pcon","Hash","KmerSet","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","get","init","into","is_in_subset","k","new","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Pcon","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","get","init","into","is_in_subset","k","new","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip"],"q":[[0,"br"],[35,"br::cli"],[36,"br::correct"],[50,"br::correct::exist"],[79,"br::correct::exist::one"],[137,"br::correct::exist::two"],[205,"br::correct::gap_size"],[226,"br::correct::graph"],[246,"br::correct::greedy"],[267,"br::error"],[342,"br::set"],[350,"br::set::hash"],[371,"br::set::pcon"],[391,"alloc::vec"],[392,"core::option"],[393,"alloc::boxed"],[394,"core::fmt"],[395,"core::fmt"],[396,"anyhow"],[397,"clap_builder::builder::possible_value"],[398,"core::result"],[399,"core::any"],[400,"log"],[401,"strum"],[402,"rayon::iter::par_bridge"],[403,"core::error"],[404,"std::io"],[405,"pcon::solid"]],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Set the number of threads use by count step","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","An iterator over the variants of ScenarioOne","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the variants of ScenarioTwo","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","We can’t create file. In C binding it’s equal to 0","We can’t open file. In C binding it’s equal to 1","","Error emmit durring Cli parsing","See enum Cli","All error produce by Pcon","Error durring read file. In C binding it’s equal to 3","Error durring write in file. In C binding it’s equal to 2","Error emmit when pcon try to work with file","See enum IO","","No error, this exist only for C binding it’s the value …","","Number of inputs and outputs must be the same","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,6,6,0,0,0,0,6,6,0,0,22,23,23,22,22,23,23,23,23,23,23,22,22,23,23,23,23,0,22,23,23,23,23,0,23,23,23,25,25,0,25,0,0,25,25,26,25,26,25,25,26,25,26,25,25,26,25,26,25,26,25,26,25,26,25,26,25,25,26,25,26,26,25,26,25,26,26,26,26,26,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,28,28,29,28,29,28,28,29,28,29,28,28,29,28,29,28,29,28,29,28,29,28,29,28,28,29,28,29,29,28,29,28,29,29,29,29,29,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,35,35,34,0,33,0,35,35,0,33,34,35,34,34,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,33,34,34,35,35,33,33,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,0,0,0,0,37,0,37,0,0,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40],"f":"``````{ce{}{}}0{{{f{{d{b}}}}hjj}{{d{{n{l}}}}}}`{bb}{{ce}A`{}{}}`{Abc{}}0{AbA`}`{{bAd}Af}{cc{}}7{{}Ab}8{cAh{}}{{{Al{Aj}}{Al{Aj}}{d{{n{l}}}}AhAn}{{B`{A`}}}}`5:{b{{f{Bb}}}}{c{{f{e}}}{}{}}<{c{{Bd{e}}}{}{}}0{cBf{}}{{}{{Al{b}}}}?{j{{f{Bh}}}}``````{{l{Al{j}}}{{d{j}}}}{{lAn{Al{j}}}{{f{{Bj{{d{j}}Ab}}}}}}````{lj}{lh}``{{BlhAn{Al{j}}}{{f{{Bj{AnAb}}}}}}{ce{}{}}0{BlAb}{{BlhAn{Al{j}}}{{Bj{{d{j}}Ab}}}}{{{Bn{c}}An{Al{j}}}{{f{{Bj{{d{j}}Ab}}}}}{BlC`}}{Abc{}}0{AbA`}{cc{}}6{{BlhAn{Al{j}}}Ab}{{BlAbj}Bl}{{}Ab}9{cAh{}}{{hj}{{Bn{c}}}{BlC`}}`{{BlhAn{Al{j}}}Ah}{c{{f{e}}}{}{}}={c{{Bd{e}}}{}{}}0`{cBf{}}{{{Bn{c}}}h{BlC`}}{ce{}{}}``````{{CbhAn{Al{j}}}{{f{{Bj{AnAb}}}}}}1111{CbAb}{CbCb}{CdCd}{{ce}A`{}{}}0{{CbhAn{Al{j}}}{{Bj{{d{j}}Ab}}}}{Abc{}}000{AbA`}0{{CbAd}Af}{{CdAd}Af}{cc{}}0;;{{CbAbj}Cb}{{}Ab}0==={cAh{}}0{{}Cd}{CdAb}{Cd{{f{c}}}{}}0{{CdAb}{{f{c}}}{}}{c{{Cf{e}}}{}{}}{Cd{{Bj{Ab{f{Ab}}}}}}{ce{}{}}0{c{{f{e}}}{}{}}011{c{{Bd{e}}}{}{}}000{cBf{}}033````````````````{{ChhAn{Al{j}}}{{f{{Bj{AnAb}}}}}}4444{ChAb}{ChCh}{CjCj}{{ce}A`{}{}}0{{ChhAn{Al{j}}}{{Bj{{d{j}}Ab}}}}{Abc{}}000{AbA`}0{{ChAd}Af}{{CjAd}Af}{cc{}}0>>{{}Ab}{{ChAbj}Ch}1{ce{}{}}00{cAh{}}0{{}Cj}{CjAb}{Cj{{f{c}}}{}}0{{CjAb}{{f{c}}}{}}{c{{Cf{e}}}{}{}}{Cj{{Bj{Ab{f{Ab}}}}}}77{c{{f{e}}}{}{}}088{c{{Bd{e}}}{}{}}000{cBf{}}0::`::{{ClAn{Al{j}}}{{f{{Bj{{d{j}}Ab}}}}}}{Abc{}}0{AbA`}{cc{}}>{{}Ab}{{ClAnAb}{{f{{Bj{{d{j}}Ab}}}}}}{ce{}{}}{cAh{}}{{hj}Cl};2::9{Clh}3`33{{CnAn{Al{j}}}{{f{{Bj{{d{j}}Ab}}}}}}99874643{hCn}>5==<{Cnh}6`66{{D`An{Al{j}}}{{f{{Bj{{d{j}}Ab}}}}}}<<;:7976{D`j}{{hjj}D`}{c{{f{e}}}{}{}}:{c{{Bd{e}}}{}{}}0{cBf{}}{D`h}=```````````````======{Abc{}}00000{AbA`}00{{DbAd}Af}0{{DdAd}Af}0{{DfAd}Af}0{cc{}}{DfDb}{DdDb}22{ce{}{}}00{{}Ab}00111{cAh{}}00{Db{{f{Dh}}}}{cAj{}}00{c{{f{e}}}{}{}}00555{c{{Bd{e}}}{}{}}00000{cBf{}}00777````{{DjAn}Ah}`{Djj}```99{Abc{}}0{AbA`}>;{{DlAn}Ah};<:{Dlj}{{{d{c}}j}DlDn}9>887>`>>443{cc{}}?{{E`An}Ah}?{ce{}{}}?{E`j}{EbE`}>2==<2","c":[],"p":[[6,"CorrectionMethod",0],[5,"Vec",391],[6,"Option",392],[8,"BoxKmerSet",342],[1,"u8"],[10,"Corrector",36],[5,"Box",393],[1,"unit"],[1,"usize"],[5,"Formatter",394],[8,"Result",394],[1,"bool"],[5,"String",395],[1,"slice"],[1,"u64"],[8,"Result",396],[5,"PossibleValue",397],[6,"Result",398],[5,"TypeId",399],[6,"Level",400],[1,"tuple"],[10,"Scenario",50],[5,"Exist",50],[10,"IntoEnumIterator",401],[6,"ScenarioOne",79],[5,"ScenarioOneIter",79],[5,"IterBridge",402],[6,"ScenarioTwo",137],[5,"ScenarioTwoIter",137],[5,"GapSize",205],[5,"Graph",226],[5,"Greedy",246],[6,"Error",267],[6,"Cli",267],[6,"IO",267],[10,"Error",403],[10,"KmerSet",342],[5,"Hash",350],[10,"Read",404],[5,"Pcon",371],[5,"Solid",405]],"b":[[297,"impl-Display-for-Error"],[298,"impl-Debug-for-Error"],[299,"impl-Debug-for-Cli"],[300,"impl-Display-for-Cli"],[301,"impl-Debug-for-IO"],[302,"impl-Display-for-IO"],[304,"impl-From%3CIO%3E-for-Error"],[305,"impl-From%3CCli%3E-for-Error"]]}],\
["br_large",{"doc":"","t":"FNNNNNNONNNNNNNNNNONNOOHOOOOONNNNONNNON","n":["Command","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","confirm","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","from_subset","group_id","init","inputs","into","is_in_subset","kmer_size","kmer_solid","main","max_search","methods","outputs","record_buffer","threads","to_subset","to_subset_unchecked","try_from","try_into","two_side","type_id","update_from_arg_matches","update_from_arg_matches_mut","verbosity","vzip"],"q":[[0,"br_large"],[39,"clap_builder::builder::command"],[40,"core::fmt"],[41,"core::fmt"],[42,"clap_builder"],[43,"core::result"],[44,"clap_builder::util::id"],[45,"core::option"],[46,"anyhow"],[47,"core::any"]],"d":["","","","","","","","number of kmer need to be solid after one, greedy …","","","","","Returns the argument unchanged.","","","","","","fasta file to be correct","Calls <code>U::from(self)</code>.","","kmer length lower or equal to 32","use kmer present in fasta file as solid kmer and store …","","number of base we use to try correct error, default value …","correction method used, methods are applied in the order …","path where corrected read was write","Number of sequence record load in buffer, default 8192","Number of thread use by br, 0 use all avaible core, …","","","","","if this flag is set br correct only in forward orientation","","","","verbosity level also control by environment variable …",""],"i":[0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"f":"`{bb}0{ce{}{}}0{{}b}0`{dc{}}0{df}{{hj}l}{cc{}}{n{{Ab{hA`}}}}06{{}{{Af{Ad}}}}{{}d}`8{cAh{}}``{{}{{Aj{f}}}}`````{c{{Af{e}}}{}{}};{c{{Ab{e}}}{}{}}0`{cAl{}}{{hn}{{Ab{fA`}}}}0`>","c":[],"p":[[5,"Command",39],[1,"usize"],[1,"unit"],[5,"Command",0],[5,"Formatter",40],[8,"Result",40],[5,"ArgMatches",41],[8,"Error",42],[6,"Result",43],[5,"Id",44],[6,"Option",45],[1,"bool"],[8,"Result",46],[5,"TypeId",47]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
